/*
 * Copyright 2015 Norbert
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License. You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package norbert.mynemo.dataimport.fileformat.input;

import static com.google.common.base.Preconditions.checkArgument;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import norbert.mynemo.dataimport.scraping.CkMapping;
import norbert.mynemo.dataimport.scraping.input.CkMappingFile;

/**
 * This class provides a conversion from the CK ids of movies to the IMDb ids. This information is
 * extracted from a file generated by the scraping.
 */
class CkIdConverter {
  /**
   * A map containing a CK id as key, and its corresponding IMDb id as value.
   */
  private final Map<String, String> mappings;

  /**
   * Loads the mapping file.
   *
   * @param mappingFilepath the file containing the mappings
   */
  public CkIdConverter(String mappingFilepath) throws IOException {
    checkArgument(new File(mappingFilepath).exists(), "The mapping file must exist.");

    mappings = new HashMap<>();

    for (CkMapping mapping : new CkMappingFile(mappingFilepath)) {
      mappings.put(mapping.getCkMovie(), mapping.getImdbMovie());
    }
  }

  /**
   * Returns <code>true</code> if a corresponding IMDb movie id exists. Returns <code>false</code>
   * otherwise.
   *
   * @param ckId an id of a movie from CK
   */
  public boolean canConvert(String ckId) {
    return mappings.containsKey(ckId);
  }

  /**
   * Returns the corresponding IMDb id of the given CK id of a movie.
   *
   * @param ckId an id of a movie from CK
   * @return the corresponding IMDb id
   * @throws IllegalArgumentException if the given CK id has no corresponding IMDb id
   */
  public String convert(String ckId) {
    checkArgument(mappings.containsKey(ckId), "The CK id of a movie must have a corresponding"
        + " imdb id.");

    return mappings.get(ckId);
  }
}
